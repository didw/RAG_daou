RAG 시스템이 위와 같은 형태로 구성되어있습니다.
이를 AWS EKS에 배포하하려고 합니다.
이를 위해 필요한 EKS 클러스터구성, 네트워크 구성, EKS에 배포 등 수행해야할 작업을 알려주세요.

├── README.md
├── .github
│   └── workflows
│       └── ci_cd.yaml
├── kubernetes
│   ├── deployment.yaml
│   └── service.yaml
├── agent
│   ├── Dockerfile
│   ├── app.py
│   └── requirements.txt
├── api_gateway
│   ├── Dockerfile
│   ├── app.py
│   └── requirements.txt
├── embedding
│   ├── Dockerfile
│   ├── app.py
│   └── requirements.txt
├── re_ranker
│   ├── Dockerfile
│   ├── app.py
│   └── requirements.txt
├── retriever
│   ├── Dockerfile
│   ├── app.py
│   └── requirements.txt
├── vector_db
│   ├── Dockerfile
│   ├── app.py
│   └── requirements.txt
├── data
│   └── navernews_20240725_20240930.xlsx
├── scripts
│   ├── embed_documents.py
│   └── test_query.py

아래는 주요 파일의 내용이니 참고해줘.

-- api_gateway.app.py
```
from flask import Flask, request, jsonify
import requests
import os

app = Flask(__name__)

# 각 모듈의 서비스 URL 설정 (환경 변수로 관리 권장)
EMBEDDING_URL = os.getenv('EMBEDDING_URL', 'http://embedding-service:5001/embed')
RETRIEVER_URL = os.getenv('RETRIEVER_URL', 'http://retriever-service:5002/retrieve')
RE_RANKER_URL = os.getenv('RE_RANKER_URL', 'http://re-ranker-service:5003/rerank')
AGENT_URL = os.getenv('AGENT_URL', 'http://agent-service:5004/generate')

@app.route('/query', methods=['POST'])
def query():
    user_input = request.json.get('text')
    print(f"User input: {user_input}")

    # 1. Embedding 모듈 호출
    embedding_response = requests.post(EMBEDDING_URL, json={'text': user_input})
    if embedding_response.status_code != 200:
        return jsonify({'error': 'Embedding module error'}), 500
    embedding = embedding_response.json().get('embedding')
    print(f"Embedding: {embedding}")

    # 2. Retriever 모듈 호출
    retrieval_response = requests.post(RETRIEVER_URL, json={'embedding': embedding})
    if retrieval_response.status_code != 200:
        return jsonify({'error': 'Retriever module error'}), 500
    documents = retrieval_response.json().get('documents')
    print(f"Retrieved documents: {documents}")

    # 3. Re-ranker 모듈 호출
    rerank_response = requests.post(RE_RANKER_URL, json={'documents': documents, 'query': user_input})
    if rerank_response.status_code != 200:
        return jsonify({'error': 'Re-ranker module error'}), 500
    top_document = rerank_response.json().get('top_document')
    print(f"Top document: {top_document}")

    # 4. Agent 모듈 호출
    agent_response = requests.post(AGENT_URL, json={'context': top_document, 'query': user_input})
    if agent_response.status_code != 200:
        return jsonify({'error': 'Agent module error'}), 500
    answer = agent_response.json().get('response')
    print(f"Answer: {answer}")

    return jsonify({'answer': answer})

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
```

-- kubernetes.deployment.yaml
```
apiVersion: apps/v1
kind: Deployment
metadata:
  name: embedding
spec:
  replicas: 1
  selector:
    matchLabels:
      app: embedding
  template:
    metadata:
      labels:
        app: embedding
    spec:
      containers:
        - name: embedding
          image: didw/embedding:latest
          ports:
            - containerPort: 5001

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: agent
spec:
  replicas: 1
  selector:
    matchLabels:
      app: agent
  template:
    metadata:
      labels:
        app: agent
    spec:
      containers:
        - name: agent
          image: didw/agent:latest
          ports:
            - containerPort: 5004
          env:
            - name: OPENAI_API_KEY
              valueFrom:
                secretKeyRef:
                  name: openai-secret
                  key: OPENAI_API_KEY

---
# 다른 모듈들에 대한 Deployment 설정은 생략
```

-- kubernetes.service.yaml
```
apiVersion: v1
kind: Service
metadata:
  name: embedding-service
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb-ip"
    service.beta.kubernetes.io/aws-load-balancer-scheme: internet-facing
    service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: ip
spec:
  selector:
    app: embedding
  ports:
    - protocol: TCP
      port: 80
      targetPort: 5001
  type: LoadBalancer

---
apiVersion: v1
kind: Service
metadata:
  name: api-gateway-service
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb-ip"
    service.beta.kubernetes.io/aws-load-balancer-scheme: internet-facing
    service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: ip
spec:
  selector:
    app: api-gateway
  ports:
    - protocol: TCP
      port: 80
      targetPort: 5000
  type: LoadBalancer

---
# 다른 모듈들에 대한 Service 설정은 생략
```

-- .github.workflows.ci_cd.yaml
```
name: CI/CD Pipeline

on:
  push:
    branches: [main]
jobs:
  build_and_push:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Embedding Module
        uses: docker/build-push-action@v2
        with:
          context: ./embedding
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/embedding:latest

      # 다른 모듈들에 대한 Build and push 설정은 생략

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name rag-cluster --region ${{ secrets.AWS_REGION }}

      - name: Deploy to EKS
        run: |
          kubectl apply -f kubernetes/deployment.yaml
          kubectl apply -f kubernetes/service.yaml

      - name: Update EKS
        run: |
          kubectl rollout restart deployment/retriever
          kubectl rollout restart deployment/re-ranker
          kubectl rollout restart deployment/agent
          kubectl rollout restart deployment/api-gateway
          kubectl rollout restart deployment/vector-db
          kubectl rollout restart deployment/embedding
```
